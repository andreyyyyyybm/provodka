import asyncio
import random
import time
import requests
import secret

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ReplyKeyboardRemove


main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), KeyboardButton(text="üîë –í—Å–ø–æ–º–Ω–∏—Ç—å –ª–æ–≥–∏–Ω")],
        [KeyboardButton(text="‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"), KeyboardButton(text="üìú –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="üìä –¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤"), KeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)



bin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¥–∞"), KeyboardButton(text="–Ω–µ—Ç")]
    ],
    resize_keyboard=True
)

teachers = {}
questions = {}
answered_questions={}
equation_solutions = {
    1001: ("–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?", "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –≤–∏–¥ ax^2 + bx + c = 0. "
                                        "–†–µ—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç: D = b^2 - 4ac. –ï—Å–ª–∏ D > 0, "
                                        "—Ç–æ –¥–≤–∞ –∫–æ—Ä–Ω—è: x1 = (-b + sqrt(D)) / 2a, x2 = (-b - sqrt(D)) / 2a. "
                                        "–ï—Å–ª–∏ D = 0, —Ç–æ –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å x = -b / 2a. –ï—Å–ª–∏ D < 0, —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç."),
    1002: ("–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π", "–õ–∏–Ω–µ–π–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–∞ ax + b = 0 —Ä–µ—à–∞—é—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å–æ–º –∏ –¥–µ–ª–µ–Ω–∏–µ–º: x = -b/a."),
    1003: ("–ö–∞–∫ –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–∏ –∫—É–±–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?", "–ö–æ—Ä–Ω–∏ –∫—É–±–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ –ö–∞—Ä–¥–∞–Ω–æ –∏–ª–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏."),
    1004: ("–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞?", "–ü–ª–æ—â–∞–¥—å = –¥–ª–∏–Ω–∞ √ó —à–∏—Ä–∏–Ω–∞."),
    1005: ("–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–∏–º–µ—Ç—Ä?", "–ü–µ—Ä–∏–º–µ—Ç—Ä - —Å—É–º–º–∞ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω —Ñ–∏–≥—É—Ä—ã."),
    1006: ("–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ—Ü–µ–Ω—Ç?", "–ü—Ä–æ—Ü–µ–Ω—Ç - —ç—Ç–æ –¥—Ä–æ–±—å —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 100."),
    1007: ("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–∫—Ü–∏—è?", "–§—É–Ω–∫—Ü–∏—è - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–≤—É—Ö –º–Ω–æ–∂–µ—Å—Ç–≤"),
    1008: ("–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ?", "–°—Ä–µ–¥–Ω–µ–µ = —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π"),
    1009: ("–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω?", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print(""–í–∞—à —Ç–µ–∫—Å—Ç"")."),
    1010: ("–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é?", "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: x = 10.")
}
questions_statistic={}
class Registration(StatesGroup):
    waiting_for_teacher_name = State()

class Question(StatesGroup):
    waiting_for_teacher_id = State()
    waiting_for_question = State()
    waiting_for_student_decision = State()

async def start(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —á–∞—Ç-–±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ü—Ä–æ–≤–æ–¥–∫–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
        reply_markup=main_keyboard,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É..."
    )

async def register_teacher(message: Message, state: FSMContext) -> None:
    await state.set_state(Registration.waiting_for_teacher_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.",reply_markup=ReplyKeyboardRemove())

async def save_teacher(message: Message, state: FSMContext) -> None:
    teacher_id = message.from_user.id
    if message.text in teachers.values():
        await message.answer("–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç.",reply_markup=ReplyKeyboardRemove())
        return
    teachers[teacher_id] = message.text
    await state.clear()
    await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å! –í–∞—à –ª–æ–≥–∏–Ω: `{teachers[teacher_id]}`",reply_markup=main_keyboard)

async def ask_question(message: Message, state: FSMContext) -> None:
    await state.set_state(Question.waiting_for_teacher_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:",reply_markup=ReplyKeyboardRemove())

async def get_teacher_id(message: Message, state: FSMContext) -> None:
    try:
        teacher_login = message.text
        if teacher_login not in teachers.values():
            await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",reply_markup=main_keyboard)
            await state.clear()
        else:
            for key in teachers.keys():
                if teachers[key]==teacher_login:
                    await state.update_data(teacher_login=key)
            await state.set_state(Question.waiting_for_question)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",reply_markup=ReplyKeyboardRemove())
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",reply_markup=ReplyKeyboardRemove())

async def find_similar_question(question: str) -> tuple:
    folder_id = secret.folder_id
    api_key = secret.api_key
    gpt_model = "yandexgpt-lite"

    existing_questions = "\n".join(f"{q_id}: {q_text[0]}" for q_id, q_text in equation_solutions.items())

    prompt = (
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö –Ω–æ–º–µ—Ä–æ–≤:\n\n"
        f"{existing_questions}\n\n"
        f"–í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞: {question}\n\n"
        f"–û–ø—Ä–µ–¥–µ–ª–∏, –µ—Å—Ç—å –ª–∏ –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–æ–º–µ—Ä –ø–æ—Ö–æ–∂–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
        f"–ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ 'None'."
    )

    body = {
        "modelUri": f"gpt://{folder_id}/{gpt_model}",
        "completionOptions": {"stream": False, "temperature": 0.3, "maxTokens": 1000},
        "messages": [{"role": "system", "text": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."},
                     {"role": "user", "text": prompt}],
    }

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completionAsync"
    headers = {"Content-Type": "application/json", "Authorization": f"Api-Key {api_key}"}

    response = requests.post(url, headers=headers, json=body)
    operation_id = response.json().get("id")

    url = f"https://llm.api.cloud.yandex.net:443/operations/{operation_id}"
    while True:
        response = requests.get(url, headers=headers)
        if response.json().get("done"):
            break
        time.sleep(1)

    result = response.json()["response"]["alternatives"][0]["message"]["text"].strip()

    if result.isdigit():
        q_id = int(result)
        # questions_statistic[q_id]=questions_statistic.get(q_id,0)+1
        if q_id in equation_solutions:
            return q_id, equation_solutions[q_id][1]

    return None, None

async def send_question(message: Message, state: FSMContext, bot: Bot) -> None:
    data = await state.get_data()
    teacher_id = data["teacher_login"]
    student_id = message.from_user.id
    question_text = message.text.strip()

    existing_q_id, existing_answer = await find_similar_question(question_text)
    if existing_answer:
        if teacher_id not in questions_statistic:
            questions_statistic[teacher_id] = {}  # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

        questions_statistic[teacher_id][existing_q_id] = questions_statistic[teacher_id].get(existing_q_id, 0) + 1

        await state.update_data(question_text=question_text)
        await state.set_state(Question.waiting_for_student_decision)
        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å! –ï–≥–æ –Ω–æ–º–µ—Ä: `{existing_q_id}`\n\n"
            f"üìå –í–æ–ø—Ä–æ—Å: {equation_solutions[existing_q_id][0]}\n"
            f"üí¨ –û—Ç–≤–µ—Ç: {existing_answer}\n\n"
            "–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ –≤–∞—Å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç? (–¥–∞/–Ω–µ—Ç)",reply_markup=bin_keyboard
        )
        return

    await forward_question_to_teacher(message, state, bot, question_text, teacher_id)

async def handle_student_decision(message: Message, state: FSMContext, bot: Bot) -> None:
    decision = message.text.strip().lower()
    data = await state.get_data()
    question_text = data["question_text"]
    teacher_id = data["teacher_login"]

    if decision == "–¥–∞":
        await state.clear()
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.",reply_markup=main_keyboard)
    elif decision == "–Ω–µ—Ç":
        await forward_question_to_teacher(message, state, bot, question_text, teacher_id)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",reply_markup=bin_keyboard)

async def forward_question_to_teacher(message: Message, state: FSMContext, bot: Bot, question_text: str, teacher_id: int) -> None:
    student_id = message.from_user.id
    question_id = random.randint(10000, 99999)

    if teacher_id not in questions:
        questions[teacher_id] = {}
    questions[teacher_id][question_id] = (student_id, question_text)
    answered_questions[question_id]=0
    await bot.send_message(
        teacher_id,
        f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (ID: {question_id}) –æ—Ç {message.from_user.full_name}:\n"
        f"üí¨ {question_text}\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ, –Ω–∞—á–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `12345 –í–∞—à –æ—Ç–≤–µ—Ç`).",reply_markup=main_keyboard
    )

    await state.clear()
    await message.answer(f"–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é! –ï–≥–æ ID: `{question_id}`",reply_markup=main_keyboard)

async def handle_teacher_response(message: Message, bot: Bot) -> None:
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[0].isdigit():
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
                             reply_markup=main_keyboard
                             )
        return

    question_id = int(parts[0])
    reply_text = parts[1]

    teacher_id = message.from_user.id
    if teacher_id not in questions or question_id not in questions[teacher_id]:
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",reply_markup=main_keyboard)
        return

    student_id, question_text = questions[teacher_id][question_id]
    answered_questions[question_id]=1
    await bot.send_message(
        student_id,
        f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n"
        f"üìå –í–∞—à –≤–æ–ø—Ä–æ—Å (ID {question_id}): {question_text}\n"
        f"üí¨ –û—Ç–≤–µ—Ç: {reply_text}",reply_markup=main_keyboard
    )
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É!",reply_markup=main_keyboard)


async def list_all_questions(message: Message) -> None:
    teacher_id = message.from_user.id
    if teacher_id not in questions or not questions[teacher_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",reply_markup=main_keyboard)
        return

    text = "üìã –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∑–∞–¥–∞–≤–∞–ª–∏:\n\n"
    for q_id, (student_id, question_text) in questions[teacher_id].items():
        text += f"üîπ *ID:* `{q_id}`\nüí¨ *–í–æ–ø—Ä–æ—Å:* {question_text}\n\n"

    await message.answer(text,reply_markup=main_keyboard)


async def info(message: Message) -> None:
    await message.answer("üöÄ –ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞\n"
"–ù–∞—à –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –±–ª–∞–≥–æ–¥–∞—Ä—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
"üéØ –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º—ã —Ä–µ—à–∞–µ–º:\n"
"–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π –æ—Ç–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏.\n"
"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏: –Ø–∑—ã–∫–æ–≤–æ–π –±–∞—Ä—å–µ—Ä –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–≤–ª–µ—á—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
"–ü–æ—Ç–µ—Ä—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –∫—É—Ä—Å–æ–≤.\n",
                         reply_markup=main_keyboard
                         )

async def list_unanswered_questions(message: Message) -> None:
    teacher_id = message.from_user.id
    if teacher_id not in questions or not questions[teacher_id]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",reply_markup=main_keyboard)
        return

    unanswered = {q_id: q_text for q_id, q_text in questions[teacher_id].items() if answered_questions[q_id]==0}

    text = "üìã –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    for q_id, (student_id, question_text) in unanswered.items():
        text += f"üîπ *ID:* `{q_id}`\nüí¨ *–í–æ–ø—Ä–æ—Å:* {question_text}\n\n"

    await message.answer(text,reply_markup=main_keyboard)

async def remember_login(message: Message) -> None:
    teacher_id = message.from_user.id
    if teacher_id not in teachers:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
    else:
        await message.answer(f"–í–∞—à –ª–æ–≥–∏–Ω: {teachers[teacher_id]}.",reply_markup=main_keyboard)

def comporator(a):
    return a[1]
async def count_question(message: Message) -> None:
    answer = ''
    teacher_id=message.from_user.id
    if teacher_id in questions_statistic.keys():
        sort_list=[[key,value] for key,value in questions_statistic[teacher_id].items()]
        sort_list.sort(key=comporator)
        sort_list=sort_list[::-1]
        for i in range(min(len(sort_list),5)):
            answer += f'{sort_list[i][1]} —Ä–∞–∑(–∞) - {equation_solutions[sort_list[i][0]][0]} \n\n'
    if len(answer) != 0:
        await message.answer(answer,reply_markup=main_keyboard)
    else:
        await message.answer("–í–æ–ø—Ä–æ—Å–æ–≤ –µ—â—ë –Ω–µ –∑–∞–¥–∞–≤–∞–ª–∏.",reply_markup=main_keyboard)
async def main() -> None:
    bot = Bot(token=secret.bot_token)
    dp = Dispatcher()

    dp.message.register(start, Command("start"))
    dp.message.register(register_teacher, Command("register"))
    dp.message.register(save_teacher, Registration.waiting_for_teacher_name)
    dp.message.register(ask_question, Command("ask"))
    dp.message.register(get_teacher_id, Question.waiting_for_teacher_id)
    dp.message.register(send_question, Question.waiting_for_question)
    dp.message.register(handle_student_decision, Question.waiting_for_student_decision)
    dp.message.register(list_all_questions, Command("all_questions"))
    dp.message.register(list_unanswered_questions, Command("unans_questions"))
    dp.message.register(remember_login, Command("remember_login"))
    dp.message.register(count_question, Command("count_question"))
    dp.message.register(info, Command("info"))
    dp.message.register(info, F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    dp.message.register(register_teacher, F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    dp.message.register(remember_login, F.text == "üîë –í—Å–ø–æ–º–Ω–∏—Ç—å –ª–æ–≥–∏–Ω")
    dp.message.register(list_unanswered_questions, F.text == "‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    dp.message.register(list_all_questions, F.text == "üìú –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã")
    dp.message.register(count_question, F.text == "üìä –¢–æ–ø –≤–æ–ø—Ä–æ—Å–æ–≤")
    dp.message.register(ask_question, F.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")

    dp.message.register(handle_teacher_response, F.text)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
